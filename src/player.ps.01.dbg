.include "hdr.asm"
.accu 16
.index 16
.16bit
.define __initPlayerCharacter_locals 0
.define __updatePlayerCharacterStats_locals 0
.define __addItemToCharacterInventory_locals 8
.define __removeItemFromCharacterInventory_locals 0
.define __getCharacterInventorySlot_locals 0
.define __setPlayerCharacterPosition_locals 0
.define __getPlayerCharacterPosition_locals 0
.define __levelUpPlayerCharacter_locals 0
.define __healPlayerCharacter_locals 0
.define __restorePlayerCharacterTimeEnergy_locals 0

.SECTION ".initPlayerCharactertext_0x0" SUPERFREE

initPlayerCharacter:
; sub sp,#__initPlayerCharacter_locals
.ifgr __initPlayerCharacter_locals 0
tsa
sec
sbc #__initPlayerCharacter_locals
tas
.endif
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #120,tcc__r0
lda.w #120
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x10
; st2 tcc__r0, [playerCharacter,16]
lda.b tcc__r0
sta.l playerCharacter + 16
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #104,tcc__r0
lda.w #104
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x12
; st2 tcc__r0, [playerCharacter,18]
lda.b tcc__r0
sta.l playerCharacter + 18
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #100,tcc__r0
lda.w #100
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [playerCharacter,0]
lda.b tcc__r0
sta.l playerCharacter + 0
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #100,tcc__r0
lda.w #100
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x2
; st2 tcc__r0, [playerCharacter,2]
lda.b tcc__r0
sta.l playerCharacter + 2
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #50,tcc__r0
lda.w #50
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x4
; st2 tcc__r0, [playerCharacter,4]
lda.b tcc__r0
sta.l playerCharacter + 4
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #50,tcc__r0
lda.w #50
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x6
; st2 tcc__r0, [playerCharacter,6]
lda.b tcc__r0
sta.l playerCharacter + 6
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0xc
; st1 tcc__r0, [playerCharacter,12]
sep #$20
lda.b tcc__r0
sta.l playerCharacter + 12
rep #$20
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x8
; st2 tcc__r0, [playerCharacter,8]
lda.b tcc__r0
sta.l playerCharacter + 8
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #100,tcc__r0
lda.w #100
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0xa
; st2 tcc__r0, [playerCharacter,10]
lda.b tcc__r0
sta.l playerCharacter + 10
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #10,tcc__r0
lda.w #10
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0xd
; st1 tcc__r0, [playerCharacter,13]
sep #$20
lda.b tcc__r0
sta.l playerCharacter + 13
rep #$20
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #5,tcc__r0
lda.w #5
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0xe
; st1 tcc__r0, [playerCharacter,14]
sep #$20
lda.b tcc__r0
sta.l playerCharacter + 14
rep #$20
; push2 imm r 0xf0
pea.w 320
; push2 imm r 0xf0
pea.w 0
; push4 imm r 0x2f0
pea.w :playerCharacter
pea.w playerCharacter + 20
; call r 0x2f0
jsr.l memset
; add sp, #8
tsa
clc
adc #8
tas
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x154
; st1 tcc__r0, [playerCharacter,340]
sep #$20
lda.b tcc__r0
sta.l playerCharacter + 340
rep #$20
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x155
; st1 tcc__r0, [playerCharacter,341]
sep #$20
lda.b tcc__r0
sta.l playerCharacter + 341
rep #$20
; gsym_addr t 0 a 3014 ind 3014
; ERROR no jump found to patch
; add sp, #__initPlayerCharacter_locals
.ifgr __initPlayerCharacter_locals 0
tsa
clc
adc #__initPlayerCharacter_locals
tas
.endif
rtl
.ENDS

.SECTION ".updatePlayerCharacterStatstext_0x1" SUPERFREE

updatePlayerCharacterStats:
; sub sp,#__updatePlayerCharacterStats_locals
.ifgr __updatePlayerCharacterStats_locals 0
tsa
sec
sbc #__updatePlayerCharacterStats_locals
tas
.endif
; load 0
; type 16 reg 0x3f0 extra 0x429d000
; ld2 [playerCharacter + 0], tcc__r0
lda.l playerCharacter + 0
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x429d000
; ld2 [playerCharacter + 2], tcc__r1
lda.l playerCharacter + 2
sta.b tcc__r1
; gen_opi len 2 op 0x97
; ucmpcd tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
beq +
bcs ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 3827 ind 3827
; gsym_addr t 0 a 3864 ind 3864
; ERROR no jump found to patch
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 3983 ind 3983
; cmp op 0x95 inv 1 v 243 r 3983
; cmp ne
bne +
; gsym_addr t 0 a 4070 ind 4070
; ERROR no jump found to patch
brl __local_0
+
; gtst finished; t 3983
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [playerCharacter + 2], tcc__r0
lda.l playerCharacter + 2
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [playerCharacter,0]
lda.b tcc__r0
sta.l playerCharacter + 0
__local_0:
; gsym_addr t 3983 a 4402 ind 4402
; load 0
; type 16 reg 0x3f0 extra 0x429d000
; ld2 [playerCharacter + 4], tcc__r0
lda.l playerCharacter + 4
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x429d000
; ld2 [playerCharacter + 6], tcc__r1
lda.l playerCharacter + 6
sta.b tcc__r1
; gen_opi len 2 op 0x97
; ucmpcd tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
beq +
bcs ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 4810 ind 4810
; gsym_addr t 0 a 4847 ind 4847
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 4935 ind 4935
; cmp op 0x95 inv 1 v 243 r 4935
; cmp ne
bne +
; gsym_addr t 0 a 5022 ind 5022
brl __local_1
+
; gtst finished; t 4935
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [playerCharacter + 6], tcc__r0
lda.l playerCharacter + 6
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x4
; st2 tcc__r0, [playerCharacter,4]
lda.b tcc__r0
sta.l playerCharacter + 4
__local_1:
; gsym_addr t 4935 a 5323 ind 5323
__local_4:
; load 0
; type 16 reg 0x3f0 extra 0x429d000
; ld2 [playerCharacter + 8], tcc__r0
lda.l playerCharacter + 8
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x429d000
; ld2 [playerCharacter + 10], tcc__r1
lda.l playerCharacter + 10
sta.b tcc__r1
; gen_opi len 2 op 0x93
; ucmpcd tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
bcs ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 5727 ind 5727
; gsym_addr t 0 a 5764 ind 5764
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 5852 ind 5852
; cmp op 0x95 inv 1 v 243 r 5852
; cmp ne
bne +
; gsym_addr t 0 a 5939 ind 5939
brl __local_2
+
; gtst finished; t 5852
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [playerCharacter + 12], tcc__r0
lda.w #0
sep #$20
lda.l playerCharacter + 12
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9c
; cmpcd tcc__r0, #50
ldx #1
lda.b tcc__r0
sec
sbc.w #50
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 5852 v 5 r 6293 ind 6293
; gsym_addr t 5852 a 6333 ind 6333
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 5852 v 243 r 6424 ind 6424
; cmp op 0x95 inv 1 v 243 r 6424
; cmp ne
bne +
__local_2:
; gsym_addr t 5852 a 6514 ind 6514
brl __local_3
+
; gtst finished; t 6424
; gtst inv 1 t 0 v 245 r 6589 ind 6589
; VT_jmp r 6589 t 0 ji 1 inv 1 vtop->c.i 6424
; gsym_addr t 0 a 6674 ind 6674
; gtst finished; t 6424
; call r 0x2f0
jsr.l levelUpPlayerCharacter
; gjmp_addr 5358 at 6774
jmp.w __local_4
; gsym_addr t 6774 a 5358 ind 6815
__local_3:
; gsym_addr t 6424 a 6850 ind 6850
; gsym_addr t 0 a 5358 ind 6885
; gsym_addr t 0 a 6917 ind 6917
; add sp, #__updatePlayerCharacterStats_locals
.ifgr __updatePlayerCharacterStats_locals 0
tsa
clc
adc #__updatePlayerCharacterStats_locals
tas
.endif
rtl
.ENDS

.SECTION ".addItemToCharacterInventorytext_0x2" SUPERFREE

addItemToCharacterInventory:
; sub sp,#__addItemToCharacterInventory_locals
.ifgr __addItemToCharacterInventory_locals 0
tsa
sec
sbc #__addItemToCharacterInventory_locals
tas
.endif
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x51f2 ft 0x11 fc 0xfffffffe
; st1 tcc__r0, [sp,-2]
; stack adjust: fc + disp - loc - 256 -254
sep #$20
lda.b tcc__r0
sta -2 + __addItemToCharacterInventory_locals + 1,s
rep #$20
__local_7:
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc - 256 -254
lda.w #0
sep #$20
lda -2 + __addItemToCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9c
; cmpcd tcc__r0, #16
ldx #1
lda.b tcc__r0
sec
sbc.w #16
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 7960 ind 7960
; gsym_addr t 0 a 7997 ind 7997
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 8085 ind 8085
; cmp op 0x95 inv 1 v 243 r 8085
; cmp ne
bne +
; gsym_addr t 0 a 8172 ind 8172
brl __local_5
+
; gtst finished; t 8085
; gjmp_addr 0 at 8244
jmp.w __local_6
; gsym_addr t 8244 a 0 ind 8282
__local_13:
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc - 256 -254
lda.w #0
sep #$20
lda -2 + __addItemToCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x0
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c -2 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
; store r 0x0 fr 0x51f2 ft 0x11 fc 0xfffffffe
; st1 tcc__r0, [sp,-2]
; stack adjust: fc + disp - loc - 256 -254
sep #$20
lda.b tcc__r0
sta -2 + __addItemToCharacterInventory_locals + 1,s
rep #$20
; gjmp_addr 7626 at 8959
jmp.w __local_7
; gsym_addr t 8959 a 7626 ind 9000
__local_6:
; gsym_addr t 8244 a 9035 ind 9035
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc - 256 -254
lda.w #0
sep #$20
lda -2 + __addItemToCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op *
; mul #20, tcc__r0
lda.w #20
sta.b tcc__r9
lda.b tcc__r0
sta.b tcc__r10
jsr.l tcc__mul
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld320 #playerCharacter + 20, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:playerCharacter
sta.b tcc__r1h
lda.w #playerCharacter + 20
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 20 r type 0x37e1af80)
; length xxy 320 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 0 reg 0x101 extra 0x429d000
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; load 1
; type 0 reg 0x1f2 extra 0x429d000
; ld2 [sp,3],tcc__r1
; stack adjust: fc + disp - loc - 256 -249
lda 3 + __addItemToCharacterInventory_locals + 1,s
sta.b tcc__r1
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 10176 ind 10176
; gsym_addr t 0 a 10215 ind 10215
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 10305 ind 10305
; cmp op 0x95 inv 1 v 243 r 10305
; cmp ne
bne +
; gsym_addr t 0 a 10395 ind 10395
brl __local_8
+
; gtst finished; t 10305
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc - 256 -254
lda.w #0
sep #$20
lda -2 + __addItemToCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op *
; mul #20, tcc__r0
lda.w #20
sta.b tcc__r9
lda.b tcc__r0
sta.b tcc__r10
jsr.l tcc__mul
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld320 #playerCharacter + 20, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:playerCharacter
sta.b tcc__r1h
lda.w #playerCharacter + 20
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 20 r type 0x37e1af80)
; length xxy 320 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 20 r type 0x37e1af80)
; length xxy 4 vtop->type 0x4
inc.b tcc__r1
inc.b tcc__r1
; load 0
; type 17 reg 0x5101 extra 0x0
; ld1 [tcc__r1,0],tcc__r0
lda.w #0
sep #$20
lda.b [tcc__r1]
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9c
; cmpcd tcc__r0, #99
ldx #1
lda.b tcc__r0
sec
sbc.w #99
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 10305 v 5 r 11594 ind 11594
; gsym_addr t 10305 a 11637 ind 11637
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 10305 v 243 r 11731 ind 11731
; cmp op 0x95 inv 1 v 243 r 11731
; cmp ne
bne +
__local_8:
; gsym_addr t 10305 a 11825 ind 11825
brl __local_9
+
; gtst finished; t 11731
; gtst inv 1 t 0 v 245 r 11904 ind 11904
; VT_jmp r 11904 t 0 ji 1 inv 1 vtop->c.i 11731
; gsym_addr t 0 a 11993 ind 11993
; gtst finished; t 11731
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc - 256 -254
lda.w #0
sep #$20
lda -2 + __addItemToCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op *
; mul #20, tcc__r0
lda.w #20
sta.b tcc__r9
lda.b tcc__r0
sta.b tcc__r10
jsr.l tcc__mul
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld320 #playerCharacter + 20, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:playerCharacter
sta.b tcc__r1h
lda.w #playerCharacter + 20
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 20 r type 0x0)
; length xxy 320 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 20 r type 0x0)
; length xxy 4 vtop->type 0x4
inc.b tcc__r1
inc.b tcc__r1
; load 0
; type 17 reg 0x5101 extra 0x0
; ld1 [tcc__r1,0],tcc__r0
lda.w #0
sep #$20
lda.b [tcc__r1]
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0xf0 extra 0x429d000
; ld2 #99,tcc__r1
lda.w #99
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x0 c 99 r type 0x11)
; length xxy 2 vtop->type 0x0
sec
lda.b tcc__r1
sbc.b tcc__r0
sta.b tcc__r1
; store r 0x1 fr 0x51f2 ft 0x11 fc 0xffffffff
; st1 tcc__r1, [sp,-1]
; stack adjust: fc + disp - loc - 256 -253
sep #$20
lda.b tcc__r1
sta -1 + __addItemToCharacterInventory_locals + 1,s
rep #$20
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,5],tcc__r0
; stack adjust: fc + disp - loc - 256 -247
lda.w #0
sep #$20
lda 5 + __addItemToCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r0
; load 1
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-1],tcc__r1
; stack adjust: fc + disp - loc - 256 -253
lda.w #0
sep #$20
lda -1 + __addItemToCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r1
; gen_opi len 2 op 0x9e
; cmpcd tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
beq +++
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 14015 ind 14015
; gsym_addr t 0 a 14054 ind 14054
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 14144 ind 14144
; cmp op 0x95 inv 1 v 243 r 14144
; cmp ne
bne +
; gsym_addr t 0 a 14234 ind 14234
brl __local_10
+
; gtst finished; t 14144
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc - 256 -254
lda.w #0
sep #$20
lda -2 + __addItemToCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op *
; mul #20, tcc__r0
lda.w #20
sta.b tcc__r9
lda.b tcc__r0
sta.b tcc__r10
jsr.l tcc__mul
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld320 #playerCharacter + 20, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:playerCharacter
sta.b tcc__r1h
lda.w #playerCharacter + 20
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 20 r type 0x37e1af80)
; length xxy 320 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 20 r type 0x37e1af80)
; length xxy 4 vtop->type 0x4
inc.b tcc__r1
inc.b tcc__r1
; load 0
; type 17 reg 0x5101 extra 0x0
; ld1 [tcc__r1,0],tcc__r0
lda.w #0
sep #$20
lda.b [tcc__r1]
rep #$20
sta.b tcc__r0
; load 2
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,5],tcc__r2
; stack adjust: fc + disp - loc - 256 -247
lda.w #0
sep #$20
lda 5 + __addItemToCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r2
; gen_opi len 2 op +
; adc tcc__r2 (0x2), tcc__r0 (0x0) (fr type 0x0 c 20 r type 0x11)
; length xxy 2 vtop->type 0x0
clc
lda.b tcc__r0
adc.b tcc__r2
sta.b tcc__r0
; store r 0x0 fr 0x5101 ft 0x11 fc 0x14
; st1 tcc__r0, [tcc__r1,0]
sep #$20
lda.b tcc__r0
sta.b [tcc__r1]
rep #$20
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; gjmp_addr 0 at 15849
jmp.w __local_11
; gsym_addr t 15849 a 0 ind 15889
; gjmp_addr 0 at 15923
jmp.w __local_12
; gsym_addr t 15923 a 0 ind 15963
__local_10:
; gsym_addr t 14144 a 15997 ind 15997
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc - 256 -254
lda.w #0
sep #$20
lda -2 + __addItemToCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op *
; mul #20, tcc__r0
lda.w #20
sta.b tcc__r9
lda.b tcc__r0
sta.b tcc__r10
jsr.l tcc__mul
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld320 #playerCharacter + 20, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:playerCharacter
sta.b tcc__r1h
lda.w #playerCharacter + 20
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 20 r type 0x37e1af80)
; length xxy 320 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 20 r type 0x37e1af80)
; length xxy 4 vtop->type 0x4
inc.b tcc__r1
inc.b tcc__r1
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #99,tcc__r0
lda.w #99
sta.b tcc__r0
; store r 0x0 fr 0x5101 ft 0x11 fc 0x14
; st1 tcc__r0, [tcc__r1,0]
sep #$20
lda.b tcc__r0
sta.b [tcc__r1]
rep #$20
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,5],tcc__r0
; stack adjust: fc + disp - loc - 256 -247
lda.w #0
sep #$20
lda 5 + __addItemToCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r0
; load 1
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-1],tcc__r1
; stack adjust: fc + disp - loc - 256 -253
lda.w #0
sep #$20
lda -1 + __addItemToCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x0 c 5 r type 0x11)
; length xxy 2 vtop->type 0x0
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x11 fc 0x5
; st1 tcc__r0, [sp,5]
; stack adjust: fc + disp - loc - 256 -247
sep #$20
lda.b tcc__r0
sta 5 + __addItemToCharacterInventory_locals + 1,s
rep #$20
__local_12:
; gsym_addr t 15923 a 17836 ind 17836
__local_9:
; gsym_addr t 11731 a 17874 ind 17874
; gjmp_addr 8314 at 17912
jmp.w __local_13
; gsym_addr t 17912 a 8314 ind 17955
__local_5:
; gsym_addr t 8085 a 17992 ind 17992
; gsym_addr t 0 a 8314 ind 18029
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,5],tcc__r0
; stack adjust: fc + disp - loc - 256 -247
lda.w #0
sep #$20
lda 5 + __addItemToCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9f
; cmpcd tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc.w #0
tay
beq ++
bvc +
eor #$8000
+
bpl +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 18398 ind 18398
; gsym_addr t 0 a 18437 ind 18437
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 18527 ind 18527
; cmp op 0x95 inv 1 v 243 r 18527
; cmp ne
bne +
; gsym_addr t 0 a 18617 ind 18617
brl __local_14
+
; gtst finished; t 18527
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [playerCharacter + 340], tcc__r0
lda.w #0
sep #$20
lda.l playerCharacter + 340
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9c
; cmpcd tcc__r0, #16
ldx #1
lda.b tcc__r0
sec
sbc.w #16
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 18527 v 5 r 18977 ind 18977
; gsym_addr t 18527 a 19020 ind 19020
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 18527 v 243 r 19114 ind 19114
; cmp op 0x95 inv 1 v 243 r 19114
; cmp ne
bne +
__local_14:
; gsym_addr t 18527 a 19208 ind 19208
brl __local_15
+
; gtst finished; t 19114
; gtst inv 1 t 0 v 245 r 19288 ind 19288
; VT_jmp r 19288 t 0 ji 1 inv 1 vtop->c.i 19114
; gsym_addr t 0 a 19377 ind 19377
; gtst finished; t 19114
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x51f2 ft 0x11 fc 0xfffffffe
; st1 tcc__r0, [sp,-2]
; stack adjust: fc + disp - loc - 256 -254
sep #$20
lda.b tcc__r0
sta -2 + __addItemToCharacterInventory_locals + 1,s
rep #$20
__local_18:
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc - 256 -254
lda.w #0
sep #$20
lda -2 + __addItemToCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9c
; cmpcd tcc__r0, #16
ldx #1
lda.b tcc__r0
sec
sbc.w #16
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 20044 ind 20044
; gsym_addr t 0 a 20083 ind 20083
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 20173 ind 20173
; cmp op 0x95 inv 1 v 243 r 20173
; cmp ne
bne +
; gsym_addr t 0 a 20263 ind 20263
brl __local_16
+
; gtst finished; t 20173
; gjmp_addr 0 at 20339
jmp.w __local_17
; gsym_addr t 20339 a 0 ind 20379
__local_24:
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc - 256 -254
lda.w #0
sep #$20
lda -2 + __addItemToCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x0
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c -2 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
; store r 0x0 fr 0x51f2 ft 0x11 fc 0xfffffffe
; st1 tcc__r0, [sp,-2]
; stack adjust: fc + disp - loc - 256 -254
sep #$20
lda.b tcc__r0
sta -2 + __addItemToCharacterInventory_locals + 1,s
rep #$20
; gjmp_addr 19710 at 21058
jmp.w __local_18
; gsym_addr t 21058 a 19710 ind 21102
__local_17:
; gsym_addr t 20339 a 21140 ind 21140
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc - 256 -254
lda.w #0
sep #$20
lda -2 + __addItemToCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op *
; mul #20, tcc__r0
lda.w #20
sta.b tcc__r9
lda.b tcc__r0
sta.b tcc__r10
jsr.l tcc__mul
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld320 #playerCharacter + 20, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:playerCharacter
sta.b tcc__r1h
lda.w #playerCharacter + 20
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 20 r type 0x37e1af80)
; length xxy 320 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 0 reg 0x101 extra 0x429d000
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 22099 ind 22099
; gsym_addr t 0 a 22138 ind 22138
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 22228 ind 22228
; cmp op 0x95 inv 1 v 243 r 22228
; cmp ne
bne +
; gsym_addr t 0 a 22318 ind 22318
brl __local_19
+
; gtst finished; t 22228
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc - 256 -254
lda.w #0
sep #$20
lda -2 + __addItemToCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op *
; mul #20, tcc__r0
lda.w #20
sta.b tcc__r9
lda.b tcc__r0
sta.b tcc__r10
jsr.l tcc__mul
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld320 #playerCharacter + 20, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:playerCharacter
sta.b tcc__r1h
lda.w #playerCharacter + 20
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 20 r type 0x37e1af80)
; length xxy 320 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 5 reg 0x1f2 extra 0x0
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -249
lda 3 + __addItemToCharacterInventory_locals + 1,s
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x5 fc 0x14
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc - 256 -254
lda.w #0
sep #$20
lda -2 + __addItemToCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op *
; mul #20, tcc__r0
lda.w #20
sta.b tcc__r9
lda.b tcc__r0
sta.b tcc__r10
jsr.l tcc__mul
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld320 #playerCharacter + 20, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:playerCharacter
sta.b tcc__r1h
lda.w #playerCharacter + 20
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 20 r type 0x37e1af80)
; length xxy 320 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 20 r type 0x37e1af80)
; length xxy 4 vtop->type 0x4
inc.b tcc__r1
inc.b tcc__r1
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,5],tcc__r0
; stack adjust: fc + disp - loc - 256 -247
lda.w #0
sep #$20
lda 5 + __addItemToCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9f
; cmpcd tcc__r0, #99
ldx #1
lda.b tcc__r0
sec
sbc.w #99
tay
beq ++
bvc +
eor #$8000
+
bpl +++
++
dex
+++
stx.b tcc__r5
; saveregging
; store r 0x1 fr 0x1f2 ft 0x4 fc 0xfffffff8
; st4 tcc__r1, [sp,-8]
; stack adjust: fc + disp - loc - 256 -254
lda.b tcc__r1
sta -8 + __addItemToCharacterInventory_locals + 1,s
lda.b tcc__r1h
sta -6 + __addItemToCharacterInventory_locals + 1,s
; gtst inv 1 t 0 v 5 r 24827 ind 24827
; gsym_addr t 0 a 24866 ind 24866
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 24956 ind 24956
; cmp op 0x95 inv 1 v 243 r 24956
; cmp ne
bne +
; gsym_addr t 0 a 25046 ind 25046
brl __local_20
+
; gtst finished; t 24956
; gjmp_addr 0 at 25122
jmp.w __local_21
; gsym_addr t 25122 a 0 ind 25162
__local_20:
; gsym_addr t 24956 a 25196 ind 25196
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,5],tcc__r0
; stack adjust: fc + disp - loc - 256 -241
lda.w #0
sep #$20
lda 5 + __addItemToCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r0
; gjmp_addr 0 at 25429
jmp.w __local_22
; gsym_addr t 25429 a 0 ind 25469
__local_21:
; gsym_addr t 25122 a 25503 ind 25503
; load 0
; type 0 reg 0xf0 extra 0x41c6f54
; ld2 #99,tcc__r0
lda.w #99
sta.b tcc__r0
__local_22:
; gsym_addr t 25429 a 25626 ind 25626
; load 1
; type 4 reg 0x1f2 extra 0x641a
; ld4 [sp,-8],tcc__r1
; stack adjust: fc + disp - loc - 256 -254
lda -8 + __addItemToCharacterInventory_locals + 1,s
sta.b tcc__r1
lda -6 + __addItemToCharacterInventory_locals + 1,s
sta.b tcc__r1h
; store r 0x0 fr 0x101 ft 0x11 fc 0xfffffff8
; st1 tcc__r0, [tcc__r1,0]
sep #$20
lda.b tcc__r0
sta.b [tcc__r1]
rep #$20
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc - 256 -248
lda.w #0
sep #$20
lda -2 + __addItemToCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op *
; mul #20, tcc__r0
lda.w #20
sta.b tcc__r9
lda.b tcc__r0
sta.b tcc__r10
jsr.l tcc__mul
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld320 #playerCharacter + 20, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:playerCharacter
sta.b tcc__r1h
lda.w #playerCharacter + 20
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 20 r type 0x86)
; length xxy 320 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 20 r type 0x86)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #3
sta.b tcc__r1
; load 0
; type 0 reg 0x1f2 extra 0x3880c6b0
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -243
lda 3 + __addItemToCharacterInventory_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #2
asl.b tcc__r0
asl.b tcc__r0
; load 2
; type 292 reg 0x2f0 extra 0x0
; ld24 #tccs_{WLA_FILENAME}_itemNames + 0, tcc__r2 (type 0x124)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:tccs_{WLA_FILENAME}_itemNames
sta.b tcc__r2h
lda.w #tccs_{WLA_FILENAME}_itemNames + 0
sta.b tcc__r2
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r2 (0x2) (fr type 0x124 c 0 r type 0x4)
; length xxy 24 vtop->type 0x124
clc
lda.b tcc__r2
adc.b tcc__r0
sta.b tcc__r2
; ldpush before load type 0x4 reg 0x102
; load 0
; type 4 reg 0x102 extra 0x0
; ld4 [tcc__r2,0],tcc__r0
ldy #0
lda.b [tcc__r2],y
sta.b tcc__r0
iny
iny
lda.b [tcc__r2],y
sta.b tcc__r0h
; ldpush4 (type 0x4 reg 0x0) tcc__r0
pei (tcc__r0h)
pei (tcc__r0)
; ldpush before load type 0x4 reg 0x1001
; ldpush4 (type 0x4 reg 0x1) tcc__r1
pei (tcc__r1h)
pei (tcc__r1)
; call r 0x2f0
jsr.l strcpy
; add sp, #8
tsa
clc
adc #8
tas
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [playerCharacter + 340], tcc__r0
lda.w #0
sep #$20
lda.l playerCharacter + 340
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x0
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 340 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x154
; st1 tcc__r0, [playerCharacter,340]
sep #$20
lda.b tcc__r0
sta.l playerCharacter + 340
rep #$20
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; gjmp_addr 15849 at 28588
jmp.w __local_23
; gsym_addr t 28588 a 15849 ind 28632
__local_19:
; gsym_addr t 22228 a 28670 ind 28670
; gjmp_addr 20413 at 28708
jmp.w __local_24
; gsym_addr t 28708 a 20413 ind 28752
__local_16:
; gsym_addr t 20173 a 28790 ind 28790
; gsym_addr t 0 a 20413 ind 28828
__local_15:
; gsym_addr t 19114 a 28862 ind 28862
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 28588 at 28978
jmp.w __local_25
; gsym_addr t 28978 a 28588 ind 29022
__local_11:
__local_23:
__local_25:
; gsym_addr t 28978 a 29060 ind 29060
; add sp, #__addItemToCharacterInventory_locals
.ifgr __addItemToCharacterInventory_locals 0
tsa
clc
adc #__addItemToCharacterInventory_locals
tas
.endif
rtl
.ENDS

.SECTION ".removeItemFromCharacterInventorytext_0x3" SUPERFREE

removeItemFromCharacterInventory:
; sub sp,#__removeItemFromCharacterInventory_locals
.ifgr __removeItemFromCharacterInventory_locals 0
tsa
sec
sbc #__removeItemFromCharacterInventory_locals
tas
.endif
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -251
lda.w #0
sep #$20
lda 3 + __removeItemFromCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9d
; cmpcd tcc__r0, #16
ldx #1
lda.b tcc__r0
sec
sbc.w #16
tay
bvc +
eor #$8000
+
bpl +++
++
dex
+++
stx.b tcc__r5
; gtst inv 0 t 0 v 5 r 29865 ind 29865
; gsym_addr t 0 a 29904 ind 29904
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 0 t 0 v 243 r 29994 ind 29994
; cmp op 0x95 inv 0 v 243 r 29994
; cmp ne
beq +
; gsym_addr t 0 a 30084 ind 30084
brl __local_26
+
; gtst finished; t 29994
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -251
lda.w #0
sep #$20
lda 3 + __removeItemFromCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op *
; mul #20, tcc__r0
lda.w #20
sta.b tcc__r9
lda.b tcc__r0
sta.b tcc__r10
jsr.l tcc__mul
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld320 #playerCharacter + 20, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:playerCharacter
sta.b tcc__r1h
lda.w #playerCharacter + 20
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 20 r type 0x37e1af80)
; length xxy 320 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 0 reg 0x101 extra 0x429d000
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 0 t 29994 v 5 r 31083 ind 31083
; gsym_addr t 29994 a 31126 ind 31126
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 0 t 29994 v 243 r 31220 ind 31220
; cmp op 0x95 inv 0 v 243 r 31220
; cmp ne
beq +
__local_26:
; gsym_addr t 29994 a 31314 ind 31314
brl __local_27
+
; gtst finished; t 31220
; gtst inv 1 t 0 v 244 r 31394 ind 31394
; VT_jmp r 31394 t 0 ji 0 inv 1 vtop->c.i 31220
; gjmp_addr 0 at 31483
jmp.w __local_28
; gsym_addr t 31483 a 0 ind 31523
__local_27:
; gsym_addr t 31220 a 31557 ind 31557
; gtst finished; t 31483
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 0 at 31698
jmp.w __local_29
; gsym_addr t 31698 a 0 ind 31738
__local_28:
; gsym_addr t 31483 a 31772 ind 31772
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -251
lda.w #0
sep #$20
lda 3 + __removeItemFromCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op *
; mul #20, tcc__r0
lda.w #20
sta.b tcc__r9
lda.b tcc__r0
sta.b tcc__r10
jsr.l tcc__mul
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld320 #playerCharacter + 20, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:playerCharacter
sta.b tcc__r1h
lda.w #playerCharacter + 20
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 20 r type 0x37e1af80)
; length xxy 320 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 20 r type 0x37e1af80)
; length xxy 4 vtop->type 0x4
inc.b tcc__r1
inc.b tcc__r1
; load 0
; type 17 reg 0x5101 extra 0x0
; ld1 [tcc__r1,0],tcc__r0
lda.w #0
sep #$20
lda.b [tcc__r1]
rep #$20
sta.b tcc__r0
; load 1
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,4],tcc__r1
; stack adjust: fc + disp - loc - 256 -250
lda.w #0
sep #$20
lda 4 + __removeItemFromCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r1
; gen_opi len 2 op 0x9d
; cmpcd tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
bvc +
eor #$8000
+
bpl +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 33144 ind 33144
; gsym_addr t 0 a 33183 ind 33183
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 33273 ind 33273
; cmp op 0x95 inv 1 v 243 r 33273
; cmp ne
bne +
; gsym_addr t 0 a 33363 ind 33363
brl __local_30
+
; gtst finished; t 33273
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -251
lda.w #0
sep #$20
lda 3 + __removeItemFromCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op *
; mul #20, tcc__r0
lda.w #20
sta.b tcc__r9
lda.b tcc__r0
sta.b tcc__r10
jsr.l tcc__mul
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld320 #playerCharacter + 20, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:playerCharacter
sta.b tcc__r1h
lda.w #playerCharacter + 20
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 20 r type 0x37e1af80)
; length xxy 320 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 20 r type 0x37e1af80)
; length xxy 4 vtop->type 0x4
inc.b tcc__r1
inc.b tcc__r1
; load 0
; type 17 reg 0x5101 extra 0x0
; ld1 [tcc__r1,0],tcc__r0
lda.w #0
sep #$20
lda.b [tcc__r1]
rep #$20
sta.b tcc__r0
; load 2
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,4],tcc__r2
; stack adjust: fc + disp - loc - 256 -250
lda.w #0
sep #$20
lda 4 + __removeItemFromCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r2
; gen_opi len 2 op -
; sbc tcc__r2 (0x2), tcc__r0 (0x0) (fr type 0x0 c 20 r type 0x11)
; length xxy 2 vtop->type 0x0
sec
lda.b tcc__r0
sbc.b tcc__r2
sta.b tcc__r0
; store r 0x0 fr 0x5101 ft 0x11 fc 0x14
; st1 tcc__r0, [tcc__r1,0]
sep #$20
lda.b tcc__r0
sta.b [tcc__r1]
rep #$20
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -251
lda.w #0
sep #$20
lda 3 + __removeItemFromCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op *
; mul #20, tcc__r0
lda.w #20
sta.b tcc__r9
lda.b tcc__r0
sta.b tcc__r10
jsr.l tcc__mul
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld320 #playerCharacter + 20, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:playerCharacter
sta.b tcc__r1h
lda.w #playerCharacter + 20
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 20 r type 0x37e1af80)
; length xxy 320 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 20 r type 0x37e1af80)
; length xxy 4 vtop->type 0x4
inc.b tcc__r1
inc.b tcc__r1
; load 0
; type 17 reg 0x5101 extra 0x0
; ld1 [tcc__r1,0],tcc__r0
lda.w #0
sep #$20
lda.b [tcc__r1]
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 36007 ind 36007
; gsym_addr t 0 a 36046 ind 36046
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 36136 ind 36136
; cmp op 0x95 inv 1 v 243 r 36136
; cmp ne
bne +
; gsym_addr t 0 a 36226 ind 36226
brl __local_31
+
; gtst finished; t 36136
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -251
lda.w #0
sep #$20
lda 3 + __removeItemFromCharacterInventory_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op *
; mul #20, tcc__r0
lda.w #20
sta.b tcc__r9
lda.b tcc__r0
sta.b tcc__r10
jsr.l tcc__mul
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld320 #playerCharacter + 20, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:playerCharacter
sta.b tcc__r1h
lda.w #playerCharacter + 20
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 20 r type 0x37e1af80)
; length xxy 320 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 5 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x5 fc 0x14
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [playerCharacter + 340], tcc__r0
lda.w #0
sep #$20
lda.l playerCharacter + 340
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x1
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 340 r type 0x11)
; length xxy 2 vtop->type 0x0
dec.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x154
; st1 tcc__r0, [playerCharacter,340]
sep #$20
lda.b tcc__r0
sta.l playerCharacter + 340
rep #$20
__local_31:
; gsym_addr t 36136 a 37725 ind 37725
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; gjmp_addr 31698 at 37841
jmp.w __local_32
; gsym_addr t 37841 a 31698 ind 37885
__local_30:
; gsym_addr t 33273 a 37923 ind 37923
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 37841 at 38039
jmp.w __local_33
; gsym_addr t 38039 a 37841 ind 38083
__local_29:
__local_32:
__local_33:
; gsym_addr t 38039 a 38121 ind 38121
; add sp, #__removeItemFromCharacterInventory_locals
.ifgr __removeItemFromCharacterInventory_locals 0
tsa
clc
adc #__removeItemFromCharacterInventory_locals
tas
.endif
rtl
.ENDS

.SECTION ".getCharacterInventorySlottext_0x4" SUPERFREE

getCharacterInventorySlot:
; sub sp,#__getCharacterInventorySlot_locals
.ifgr __getCharacterInventorySlot_locals 0
tsa
sec
sbc #__getCharacterInventorySlot_locals
tas
.endif
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -251
lda.w #0
sep #$20
lda 3 + __getCharacterInventorySlot_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9d
; cmpcd tcc__r0, #16
ldx #1
lda.b tcc__r0
sec
sbc.w #16
tay
bvc +
eor #$8000
+
bpl +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 38899 ind 38899
; gsym_addr t 0 a 38938 ind 38938
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 39028 ind 39028
; cmp op 0x95 inv 1 v 243 r 39028
; cmp ne
bne +
; gsym_addr t 0 a 39118 ind 39118
brl __local_34
+
; gtst finished; t 39028
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 0 at 39272
jmp.w __local_35
; gsym_addr t 39272 a 0 ind 39312
__local_34:
; gsym_addr t 39028 a 39346 ind 39346
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -251
lda.w #0
sep #$20
lda 3 + __getCharacterInventorySlot_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op *
; mul #20, tcc__r0
lda.w #20
sta.b tcc__r9
lda.b tcc__r0
sta.b tcc__r10
jsr.l tcc__mul
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld320 #playerCharacter + 20, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:playerCharacter
sta.b tcc__r1h
lda.w #playerCharacter + 20
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 20 r type 0x37e1af80)
; length xxy 320 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 0 reg 0x101 extra 0x0
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 20 r type 0x37e1af80)
; length xxy 2 vtop->type 0x0
; nop
lda.b tcc__r0
and.w #255
sta.b tcc__r0
; gjmp_addr 39272 at 40355
jmp.w __local_36
; gsym_addr t 40355 a 39272 ind 40399
__local_35:
__local_36:
; gsym_addr t 40355 a 40437 ind 40437
; add sp, #__getCharacterInventorySlot_locals
.ifgr __getCharacterInventorySlot_locals 0
tsa
clc
adc #__getCharacterInventorySlot_locals
tas
.endif
rtl
.ENDS

.SECTION ".setPlayerCharacterPositiontext_0x5" SUPERFREE

setPlayerCharacterPosition:
; sub sp,#__setPlayerCharacterPosition_locals
.ifgr __setPlayerCharacterPosition_locals 0
tsa
sec
sbc #__setPlayerCharacterPosition_locals
tas
.endif
; load 0
; type 0 reg 0x1f2 extra 0x0
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -251
lda 3 + __setPlayerCharacterPosition_locals + 1,s
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x10
; st2 tcc__r0, [playerCharacter,16]
lda.b tcc__r0
sta.l playerCharacter + 16
; load 0
; type 0 reg 0x1f2 extra 0x0
; ld2 [sp,5],tcc__r0
; stack adjust: fc + disp - loc - 256 -249
lda 5 + __setPlayerCharacterPosition_locals + 1,s
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x0 fc 0x12
; st2 tcc__r0, [playerCharacter,18]
lda.b tcc__r0
sta.l playerCharacter + 18
; gsym_addr t 0 a 41432 ind 41432
; add sp, #__setPlayerCharacterPosition_locals
.ifgr __setPlayerCharacterPosition_locals 0
tsa
clc
adc #__setPlayerCharacterPosition_locals
tas
.endif
rtl
.ENDS

.SECTION ".getPlayerCharacterPositiontext_0x6" SUPERFREE

getPlayerCharacterPosition:
; sub sp,#__getPlayerCharacterPosition_locals
.ifgr __getPlayerCharacterPosition_locals 0
tsa
sec
sbc #__getPlayerCharacterPosition_locals
tas
.endif
; gtst inv 1 t 0 v 242 r 41864 ind 41864
; load 0
; type 4 reg 0x1f2 extra 0x0
; ld4 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -251
lda 3 + __getPlayerCharacterPosition_locals + 1,s
sta.b tcc__r0
lda 5 + __getPlayerCharacterPosition_locals + 1,s
sta.b tcc__r0h
; gsym_addr t 0 a 42136 ind 42136
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 42226 ind 42226
; cmp op 0x95 inv 1 v 243 r 42226
; cmp ne
bne +
; gsym_addr t 0 a 42316 ind 42316
brl __local_37
+
; gtst finished; t 42226
; load 0
; type 4 reg 0x1f2 extra 0x0
; ld4 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -251
lda 3 + __getPlayerCharacterPosition_locals + 1,s
sta.b tcc__r0
lda 5 + __getPlayerCharacterPosition_locals + 1,s
sta.b tcc__r0h
; load 1
; type 0 reg 0x3f0 extra 0x0
; ld2 [playerCharacter + 16], tcc__r1
lda.l playerCharacter + 16
sta.b tcc__r1
; store r 0x1 fr 0x100 ft 0x0 fc 0x3
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
__local_37:
; gsym_addr t 42226 a 42834 ind 42834
; gtst inv 1 t 0 v 242 r 42872 ind 42872
; load 0
; type 4 reg 0x1f2 extra 0x0
; ld4 [sp,7],tcc__r0
; stack adjust: fc + disp - loc - 256 -247
lda 7 + __getPlayerCharacterPosition_locals + 1,s
sta.b tcc__r0
lda 9 + __getPlayerCharacterPosition_locals + 1,s
sta.b tcc__r0h
; gsym_addr t 0 a 43144 ind 43144
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 43234 ind 43234
; cmp op 0x95 inv 1 v 243 r 43234
; cmp ne
bne +
; gsym_addr t 0 a 43324 ind 43324
brl __local_38
+
; gtst finished; t 43234
; load 0
; type 4 reg 0x1f2 extra 0x0
; ld4 [sp,7],tcc__r0
; stack adjust: fc + disp - loc - 256 -247
lda 7 + __getPlayerCharacterPosition_locals + 1,s
sta.b tcc__r0
lda 9 + __getPlayerCharacterPosition_locals + 1,s
sta.b tcc__r0h
; load 1
; type 0 reg 0x3f0 extra 0x0
; ld2 [playerCharacter + 18], tcc__r1
lda.l playerCharacter + 18
sta.b tcc__r1
; store r 0x1 fr 0x100 ft 0x0 fc 0x7
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
__local_38:
; gsym_addr t 43234 a 43842 ind 43842
; gsym_addr t 0 a 43880 ind 43880
; add sp, #__getPlayerCharacterPosition_locals
.ifgr __getPlayerCharacterPosition_locals 0
tsa
clc
adc #__getPlayerCharacterPosition_locals
tas
.endif
rtl
.ENDS

.SECTION ".levelUpPlayerCharactertext_0x7" SUPERFREE

levelUpPlayerCharacter:
; sub sp,#__levelUpPlayerCharacter_locals
.ifgr __levelUpPlayerCharacter_locals 0
tsa
sec
sbc #__levelUpPlayerCharacter_locals
tas
.endif
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [playerCharacter + 12], tcc__r0
lda.w #0
sep #$20
lda.l playerCharacter + 12
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9d
; cmpcd tcc__r0, #50
ldx #1
lda.b tcc__r0
sec
sbc.w #50
tay
bvc +
eor #$8000
+
bpl +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 44574 ind 44574
; gsym_addr t 0 a 44613 ind 44613
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 44703 ind 44703
; cmp op 0x95 inv 1 v 243 r 44703
; cmp ne
bne +
; gsym_addr t 0 a 44793 ind 44793
brl __local_39
+
; gtst finished; t 44703
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 0 at 44947
jmp.w __local_40
; gsym_addr t 44947 a 0 ind 44987
__local_39:
; gsym_addr t 44703 a 45021 ind 45021
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [playerCharacter + 12], tcc__r0
lda.w #0
sep #$20
lda.l playerCharacter + 12
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x6bc51304
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 12 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0xc
; st1 tcc__r0, [playerCharacter,12]
sep #$20
lda.b tcc__r0
sta.l playerCharacter + 12
rep #$20
; load 0
; type 16 reg 0x3f0 extra 0x429d000
; ld2 [playerCharacter + 8], tcc__r0
lda.l playerCharacter + 8
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x429d000
; ld2 [playerCharacter + 10], tcc__r1
lda.l playerCharacter + 10
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x10 c 8 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x8
; st2 tcc__r0, [playerCharacter,8]
lda.b tcc__r0
sta.l playerCharacter + 8
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [playerCharacter + 12], tcc__r0
lda.w #0
sep #$20
lda.l playerCharacter + 12
rep #$20
sta.b tcc__r0
; gen_opi len 2 op *
; mul #100, tcc__r0
lda.w #100
sta.b tcc__r9
lda.b tcc__r0
sta.b tcc__r10
jsr.l tcc__mul
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0xa
; st2 tcc__r0, [playerCharacter,10]
lda.b tcc__r0
sta.l playerCharacter + 10
; load 0
; type 16 reg 0x3f0 extra 0x429d000
; ld2 [playerCharacter + 2], tcc__r0
lda.l playerCharacter + 2
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #10
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x2
; st2 tcc__r0, [playerCharacter,2]
lda.b tcc__r0
sta.l playerCharacter + 2
; load 0
; type 16 reg 0x3f0 extra 0x429d000
; ld2 [playerCharacter + 6], tcc__r0
lda.l playerCharacter + 6
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 6 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #5
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x6
; st2 tcc__r0, [playerCharacter,6]
lda.b tcc__r0
sta.l playerCharacter + 6
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [playerCharacter + 2], tcc__r0
lda.l playerCharacter + 2
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [playerCharacter,0]
lda.b tcc__r0
sta.l playerCharacter + 0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [playerCharacter + 6], tcc__r0
lda.l playerCharacter + 6
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x4
; st2 tcc__r0, [playerCharacter,4]
lda.b tcc__r0
sta.l playerCharacter + 4
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; gjmp_addr 44947 at 47836
jmp.w __local_41
; gsym_addr t 47836 a 44947 ind 47880
__local_40:
__local_41:
; gsym_addr t 47836 a 47918 ind 47918
; add sp, #__levelUpPlayerCharacter_locals
.ifgr __levelUpPlayerCharacter_locals 0
tsa
clc
adc #__levelUpPlayerCharacter_locals
tas
.endif
rtl
.ENDS

.SECTION ".healPlayerCharactertext_0x8" SUPERFREE

healPlayerCharacter:
; sub sp,#__healPlayerCharacter_locals
.ifgr __healPlayerCharacter_locals 0
tsa
sec
sbc #__healPlayerCharacter_locals
tas
.endif
; load 0
; type 16 reg 0x3f0 extra 0x429d000
; ld2 [playerCharacter + 0], tcc__r0
lda.l playerCharacter + 0
sta.b tcc__r0
; load 1
; type 16 reg 0x1f2 extra 0x429d000
; ld2 [sp,3],tcc__r1
; stack adjust: fc + disp - loc - 256 -251
lda 3 + __healPlayerCharacter_locals + 1,s
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [playerCharacter,0]
lda.b tcc__r0
sta.l playerCharacter + 0
; load 0
; type 16 reg 0x3f0 extra 0x429d000
; ld2 [playerCharacter + 0], tcc__r0
lda.l playerCharacter + 0
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x429d000
; ld2 [playerCharacter + 2], tcc__r1
lda.l playerCharacter + 2
sta.b tcc__r1
; gen_opi len 2 op 0x97
; ucmpcd tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
beq +
bcs ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 49245 ind 49245
; gsym_addr t 0 a 49284 ind 49284
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 49374 ind 49374
; cmp op 0x95 inv 1 v 243 r 49374
; cmp ne
bne +
; gsym_addr t 0 a 49464 ind 49464
brl __local_42
+
; gtst finished; t 49374
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [playerCharacter + 2], tcc__r0
lda.l playerCharacter + 2
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [playerCharacter,0]
lda.b tcc__r0
sta.l playerCharacter + 0
__local_42:
; gsym_addr t 49374 a 49769 ind 49769
; gsym_addr t 0 a 49807 ind 49807
; add sp, #__healPlayerCharacter_locals
.ifgr __healPlayerCharacter_locals 0
tsa
clc
adc #__healPlayerCharacter_locals
tas
.endif
rtl
.ENDS

.SECTION ".restorePlayerCharacterTimeEnergytext_0x9" SUPERFREE

restorePlayerCharacterTimeEnergy:
; sub sp,#__restorePlayerCharacterTimeEnergy_locals
.ifgr __restorePlayerCharacterTimeEnergy_locals 0
tsa
sec
sbc #__restorePlayerCharacterTimeEnergy_locals
tas
.endif
; load 0
; type 16 reg 0x3f0 extra 0x429d000
; ld2 [playerCharacter + 4], tcc__r0
lda.l playerCharacter + 4
sta.b tcc__r0
; load 1
; type 16 reg 0x1f2 extra 0x429d000
; ld2 [sp,3],tcc__r1
; stack adjust: fc + disp - loc - 256 -251
lda 3 + __restorePlayerCharacterTimeEnergy_locals + 1,s
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x10 c 4 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x4
; st2 tcc__r0, [playerCharacter,4]
lda.b tcc__r0
sta.l playerCharacter + 4
; load 0
; type 16 reg 0x3f0 extra 0x429d000
; ld2 [playerCharacter + 4], tcc__r0
lda.l playerCharacter + 4
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x429d000
; ld2 [playerCharacter + 6], tcc__r1
lda.l playerCharacter + 6
sta.b tcc__r1
; gen_opi len 2 op 0x97
; ucmpcd tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
beq +
bcs ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 51199 ind 51199
; gsym_addr t 0 a 51238 ind 51238
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 51328 ind 51328
; cmp op 0x95 inv 1 v 243 r 51328
; cmp ne
bne +
; gsym_addr t 0 a 51418 ind 51418
brl __local_43
+
; gtst finished; t 51328
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [playerCharacter + 6], tcc__r0
lda.l playerCharacter + 6
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x4
; st2 tcc__r0, [playerCharacter,4]
lda.b tcc__r0
sta.l playerCharacter + 4
__local_43:
; gsym_addr t 51328 a 51723 ind 51723
; gsym_addr t 0 a 51761 ind 51761
; add sp, #__restorePlayerCharacterTimeEnergy_locals
.ifgr __restorePlayerCharacterTimeEnergy_locals 0
tsa
clc
adc #__restorePlayerCharacterTimeEnergy_locals
tas
.endif
rtl
.ENDS
.RAMSECTION "ram{WLA_FILENAME}.data" APPENDTO "globram.data"
dsb 368
playerCharacter dsb 344
tccs_{WLA_FILENAME}_itemNames dsb 24

.ENDS

.SECTION "{WLA_FILENAME}.data" APPENDTO "glob.data"

.dw tccs_{WLA_FILENAME}_L.{WLA_FILENAME}11 + 0
.dw :tccs_{WLA_FILENAME}_L.{WLA_FILENAME}11
.dw tccs_{WLA_FILENAME}_L.{WLA_FILENAME}12 + 0
.dw :tccs_{WLA_FILENAME}_L.{WLA_FILENAME}12
.dw tccs_{WLA_FILENAME}_L.{WLA_FILENAME}13 + 0
.dw :tccs_{WLA_FILENAME}_L.{WLA_FILENAME}13
.dw tccs_{WLA_FILENAME}_L.{WLA_FILENAME}14 + 0
.dw :tccs_{WLA_FILENAME}_L.{WLA_FILENAME}14
.dw tccs_{WLA_FILENAME}_L.{WLA_FILENAME}15 + 0
.dw :tccs_{WLA_FILENAME}_L.{WLA_FILENAME}15
.dw tccs_{WLA_FILENAME}_L.{WLA_FILENAME}16 + 0
.dw :tccs_{WLA_FILENAME}_L.{WLA_FILENAME}16
.db
.dw tccs_{WLA_FILENAME}_L.{WLA_FILENAME}22 + 0, :tccs_{WLA_FILENAME}_L.{WLA_FILENAME}22
.dw tccs_{WLA_FILENAME}_L.{WLA_FILENAME}23 + 0
.dw :tccs_{WLA_FILENAME}_L.{WLA_FILENAME}23
.dw tccs_{WLA_FILENAME}_L.{WLA_FILENAME}24 + 0
.dw :tccs_{WLA_FILENAME}_L.{WLA_FILENAME}24
.dw tccs_{WLA_FILENAME}_L.{WLA_FILENAME}25 + 0
.dw :tccs_{WLA_FILENAME}_L.{WLA_FILENAME}25
.dw tccs_{WLA_FILENAME}_L.{WLA_FILENAME}26 + 0
.dw :tccs_{WLA_FILENAME}_L.{WLA_FILENAME}26
.dw tccs_{WLA_FILENAME}_L.{WLA_FILENAME}27 + 0
.dw :tccs_{WLA_FILENAME}_L.{WLA_FILENAME}27
.ENDS

.SECTION ".rodata" SUPERFREE

tccs_{WLA_FILENAME}_L.{WLA_FILENAME}11: .db $4e,$6f,$6e,$65,$0
tccs_{WLA_FILENAME}_L.{WLA_FILENAME}12: .db $50,$6f,$74,$69,$6f,$6e,$0
tccs_{WLA_FILENAME}_L.{WLA_FILENAME}13: .db $54,$69,$6d,$65,$20,$43,$72,$79,$73,$74,$61,$6c,$0
tccs_{WLA_FILENAME}_L.{WLA_FILENAME}14: .db $4b,$65,$79,$0
tccs_{WLA_FILENAME}_L.{WLA_FILENAME}15: .db $57,$65,$61,$70,$6f,$6e,$0
tccs_{WLA_FILENAME}_L.{WLA_FILENAME}16: .db $41,$72,$6d,$6f,$72,$0
tccs_{WLA_FILENAME}_L.{WLA_FILENAME}22: .db $4e,$6f,$6e,$65,$0
tccs_{WLA_FILENAME}_L.{WLA_FILENAME}23: .db $50,$6f,$74,$69,$6f,$6e,$0
tccs_{WLA_FILENAME}_L.{WLA_FILENAME}24: .db $54,$69,$6d,$65,$20,$43,$72,$79,$73,$74,$61,$6c,$0
tccs_{WLA_FILENAME}_L.{WLA_FILENAME}25: .db $4b,$65,$79,$0
tccs_{WLA_FILENAME}_L.{WLA_FILENAME}26: .db $57,$65,$61,$70,$6f,$6e,$0
tccs_{WLA_FILENAME}_L.{WLA_FILENAME}27: .db $41,$72,$6d,$6f,$72,$0
.ENDS

.RAMSECTION ".bss" BANK $7e SLOT 2
.ENDS
