.include "hdr.asm"
.accu 16
.index 16
.16bit
.define __initPositionHistory_locals 0
.define __recordCurrentPosition_locals 6
.define __canRewind_locals 0
.define __canRewindDistance_locals 0
.define __rewindToFrame_locals 8
.define __rewindByFrames_locals 2
.define __stopRewind_locals 0
.define __getPositionAtFrame_locals 4
.define __getCurrentRewindFrame_locals 0
.define __getOldestFrame_locals 0
.define __getNewestFrame_locals 2
.define __calculateFrameDistance_locals 0
.define __getRewindEnergyCost_locals 0
.define __handleTimeManipulationInput_locals 0

.SECTION ".initPositionHistorytext_0x0" SUPERFREE

initPositionHistory:
; sub sp,#__initPositionHistory_locals
.ifgr __initPositionHistory_locals 0
tsa
sec
sbc #__initPositionHistory_locals
tas
.endif
; push2 imm r 0xf0
pea.w 1810
; push2 imm r 0xf0
pea.w 0
; push4 imm r 0x2f0
pea.w :positionHistory
pea.w positionHistory + 0
; call r 0x2f0
jsr.l memset
; add sp, #8
tsa
clc
adc #8
tas
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x708
; st2 tcc__r0, [positionHistory,1800]
lda.b tcc__r0
sta.l positionHistory + 1800
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x70a
; st2 tcc__r0, [positionHistory,1802]
lda.b tcc__r0
sta.l positionHistory + 1802
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x70c
; st2 tcc__r0, [positionHistory,1804]
lda.b tcc__r0
sta.l positionHistory + 1804
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x70e
; st2 tcc__r0, [positionHistory,1806]
lda.b tcc__r0
sta.l positionHistory + 1806
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x710
; st1 tcc__r0, [positionHistory,1808]
sep #$20
lda.b tcc__r0
sta.l positionHistory + 1808
rep #$20
; gsym_addr t 0 a 1402 ind 1402
; ERROR no jump found to patch
; add sp, #__initPositionHistory_locals
.ifgr __initPositionHistory_locals 0
tsa
clc
adc #__initPositionHistory_locals
tas
.endif
rtl
.ENDS

.SECTION ".recordCurrentPositiontext_0x1" SUPERFREE

recordCurrentPosition:
; sub sp,#__recordCurrentPosition_locals
.ifgr __recordCurrentPosition_locals 0
tsa
sec
sbc #__recordCurrentPosition_locals
tas
.endif
; gtst inv 1 t 0 v 240 r 1817 ind 1817
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [positionHistory + 1808], tcc__r0
lda.w #0
sep #$20
lda.l positionHistory + 1808
rep #$20
sta.b tcc__r0
; gsym_addr t 0 a 2006 ind 2006
; ERROR no jump found to patch
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 2125 ind 2125
; cmp op 0x95 inv 1 v 243 r 2125
; cmp ne
bne +
; gsym_addr t 0 a 2212 ind 2212
; ERROR no jump found to patch
brl __local_0
+
; gtst finished; t 2125
; gjmp_addr 0 at 2315
jmp.w __local_1
; gsym_addr t 2315 a 0 ind 2353
__local_0:
; gsym_addr t 2125 a 2385 ind 2385
; load 0
; type 0 reg 0x1f2 extra 0x0
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -245
lda 3 + __recordCurrentPosition_locals + 1,s
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x0 fc 0xfffffffa
; st2 tcc__r0, [sp,-6]
; stack adjust: fc + disp - loc - 256 -254
lda.b tcc__r0
sta -6 + __recordCurrentPosition_locals + 1,s
; load 0
; type 4 reg 0xf2 extra 0x0
; ld4 #(sp) + -6,tcc__r0 (fr 0xf2 ft 0x4 fc 0xfffffffa)
stz.b tcc__r0h
tsa
clc
adc #(-6 + __recordCurrentPosition_locals + 1)
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c -6 r type 0x2961afa0)
; length xxy 4 vtop->type 0x4
inc.b tcc__r0
inc.b tcc__r0
; load 1
; type 0 reg 0x1f2 extra 0x0
; ld2 [sp,5],tcc__r1
; stack adjust: fc + disp - loc - 256 -243
lda 5 + __recordCurrentPosition_locals + 1,s
sta.b tcc__r1
; store r 0x1 fr 0x100 ft 0x0 fc 0xfffffffa
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
; load 0
; type 4 reg 0xf2 extra 0x0
; ld4 #(sp) + -6,tcc__r0 (fr 0xf2 ft 0x4 fc 0xfffffffa)
stz.b tcc__r0h
tsa
clc
adc #(-6 + __recordCurrentPosition_locals + 1)
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c -6 r type 0x2961afa0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r0
adc.w #4
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [positionHistory + 1806], tcc__r1
lda.l positionHistory + 1806
sta.b tcc__r1
; store r 0x1 fr 0x100 ft 0x10 fc 0xfffffffa
; st2 tcc__r1, [tcc__r0,0]
lda.b tcc__r1
sta.b [tcc__r0]
; load 0
; type 16 reg 0x3f0 extra 0x2982c330
; ld2 [positionHistory + 1800], tcc__r0
lda.l positionHistory + 1800
sta.b tcc__r0
; gen_opi len 2 op *
; mul #6, tcc__r0
lda.w #6
sta.b tcc__r9
lda.b tcc__r0
sta.b tcc__r10
jsr.l tcc__mul
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld1800 #positionHistory + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:positionHistory
sta.b tcc__r1h
lda.w #positionHistory + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x2961afa0)
; length xxy 1800 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; push2 imm r 0xf0
pea.w 6
; ldpush before load type 0x4 reg 0xf2
; load 0
; type 4 reg 0xf2 extra 0x0
; ld4 #(sp) + -6,tcc__r0 (fr 0xf2 ft 0x4 fc 0xfffffffa)
stz.b tcc__r0h
tsa
clc
adc #(-4 + __recordCurrentPosition_locals + 1)
sta.b tcc__r0
; ldpush4 (type 0x4 reg 0x0) tcc__r0
pei (tcc__r0h)
pei (tcc__r0)
; ldpush before load type 0x4 reg 0x1
; ldpush4 (type 0x4 reg 0x1) tcc__r1
pei (tcc__r1h)
pei (tcc__r1)
; call r 0x2f0
jsr.l memcpy
; add sp, #10
tsa
clc
adc #10
tas
; load 0
; type 16 reg 0x3f0 extra 0x4701000
; ld2 [positionHistory + 1800], tcc__r0
lda.l positionHistory + 1800
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 1800 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; gen_opi len 2 op 0xb1
; div #300, tcc__r0
ldx.b tcc__r0
lda.w #300
jsr.l tcc__udiv
stx.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x708
; st2 tcc__r0, [positionHistory,1800]
lda.b tcc__r0
sta.l positionHistory + 1800
; load 0
; type 16 reg 0x3f0 extra 0x4701000
; ld2 [positionHistory + 1804], tcc__r0
lda.l positionHistory + 1804
sta.b tcc__r0
; gen_opi len 2 op 0x92
; ucmpcd tcc__r0, #300
ldx #1
lda.b tcc__r0
sec
sbc.w #300
tay
bcc ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 5757 ind 5757
; gsym_addr t 0 a 5794 ind 5794
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 5882 ind 5882
; cmp op 0x95 inv 1 v 243 r 5882
; cmp ne
bne +
; gsym_addr t 0 a 5969 ind 5969
brl __local_2
+
; gtst finished; t 5882
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [positionHistory + 1804], tcc__r0
lda.l positionHistory + 1804
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x46ed3a8
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 1804 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x70c
; st2 tcc__r0, [positionHistory,1804]
lda.b tcc__r0
sta.l positionHistory + 1804
; gjmp_addr 0 at 6545
jmp.w __local_3
; gsym_addr t 6545 a 0 ind 6583
__local_2:
; gsym_addr t 5882 a 6615 ind 6615
; load 0
; type 16 reg 0x3f0 extra 0x4701000
; ld2 [positionHistory + 1802], tcc__r0
lda.l positionHistory + 1802
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 1802 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; gen_opi len 2 op 0xb1
; div #300, tcc__r0
ldx.b tcc__r0
lda.w #300
jsr.l tcc__udiv
stx.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x70a
; st2 tcc__r0, [positionHistory,1802]
lda.b tcc__r0
sta.l positionHistory + 1802
__local_3:
; gsym_addr t 6545 a 7136 ind 7136
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [positionHistory + 1806], tcc__r0
lda.l positionHistory + 1806
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x6b7ed324
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 1806 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x70e
; st2 tcc__r0, [positionHistory,1806]
lda.b tcc__r0
sta.l positionHistory + 1806
__local_1:
; gsym_addr t 2315 a 7676 ind 7676
; add sp, #__recordCurrentPosition_locals
.ifgr __recordCurrentPosition_locals 0
tsa
clc
adc #__recordCurrentPosition_locals
tas
.endif
rtl
.ENDS

.SECTION ".canRewindtext_0x2" SUPERFREE

canRewind:
; sub sp,#__canRewind_locals
.ifgr __canRewind_locals 0
tsa
sec
sbc #__canRewind_locals
tas
.endif
; load 0
; type 16 reg 0x3f0 extra 0x4701000
; ld2 [positionHistory + 1804], tcc__r0
lda.l positionHistory + 1804
sta.b tcc__r0
; gen_opi len 2 op 0x97
; ucmpcd tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc.w #0
tay
beq +
bcs ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 8256 ind 8256
; gsym_addr t 0 a 8293 ind 8293
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 8381 ind 8381
; cmp op 0x95 inv 1 v 243 r 8381
; cmp ne
bne +
; gsym_addr t 0 a 8468 ind 8468
brl __local_4
+
; gtst finished; t 8381
; gtst inv 1 t 0 v 240 r 8540 ind 8540
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [positionHistory + 1808], tcc__r0
lda.w #0
sep #$20
lda.l positionHistory + 1808
rep #$20
sta.b tcc__r0
; gsym_addr t 0 a 8729 ind 8729
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 8817 ind 8817
; cmp op 0x95 inv 1 v 243 r 8817
; cmp ne
bne +
; gsym_addr t 0 a 8904 ind 8904
brl __local_5
+
; gtst finished; t 8817
; gtst inv 1 t 8381 v 244 r 8976 ind 8976
; VT_jmp r 8976 t 8381 ji 0 inv 1 vtop->c.i 8817
; gjmp_addr 8381 at 9067
jmp.w __local_6
; gsym_addr t 9067 a 8381 ind 9108
__local_5:
; gsym_addr t 8817 a 9143 ind 9143
; gtst finished; t 9067
; load 0
; type 0 reg 0xf5 extra 0x0
; jmpr(i) v 0xf5 r 0x0 fc 0x236b
lda #1
bra +
__local_4:
__local_6:
; gsym_addr t 9067 a 9285 ind 9285
lda #0
+
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 9067 r type 0x2961afa0)
; length xxy 2 vtop->type 0x0
; nop
lda.b tcc__r0
and.w #255
sta.b tcc__r0
; gjmp_addr 0 at 9516
jmp.w __local_7
; gsym_addr t 9516 a 0 ind 9554
__local_7:
; gsym_addr t 9516 a 9586 ind 9586
; add sp, #__canRewind_locals
.ifgr __canRewind_locals 0
tsa
clc
adc #__canRewind_locals
tas
.endif
rtl
.ENDS

.SECTION ".canRewindDistancetext_0x3" SUPERFREE

canRewindDistance:
; sub sp,#__canRewindDistance_locals
.ifgr __canRewindDistance_locals 0
tsa
sec
sbc #__canRewindDistance_locals
tas
.endif
; call r 0x2f0
jsr.l canRewind
; gtst inv 1 t 0 v 0 r 9954 ind 9954
; gsym_addr t 0 a 9991 ind 9991
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 10079 ind 10079
; cmp op 0x95 inv 1 v 243 r 10079
; cmp ne
bne +
; gsym_addr t 0 a 10169 ind 10169
brl __local_8
+
; gtst finished; t 10079
; gtst inv 0 t 0 v 244 r 10244 ind 10244
; VT_jmp r 10244 t 0 ji 0 inv 0 vtop->c.i 10079
; gsym_addr t 0 a 10333 ind 10333
; gtst finished; t 10079
; load 0
; type 16 reg 0x1f2 extra 0x4701000
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -251
lda 3 + __canRewindDistance_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 0x97
; ucmpcd tcc__r0, #180
ldx #1
lda.b tcc__r0
sec
sbc.w #180
tay
beq +
bcs ++
+ dex
++
stx.b tcc__r5
; gtst inv 0 t 10079 v 5 r 10679 ind 10679
; gsym_addr t 10079 a 10722 ind 10722
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 0 t 10079 v 243 r 10816 ind 10816
; cmp op 0x95 inv 0 v 243 r 10816
; cmp ne
beq +
__local_8:
; gsym_addr t 10079 a 10910 ind 10910
brl __local_9
+
; gtst finished; t 10816
; gtst inv 1 t 0 v 244 r 10989 ind 10989
; VT_jmp r 10989 t 0 ji 0 inv 1 vtop->c.i 10816
; gjmp_addr 0 at 11078
jmp.w __local_10
; gsym_addr t 11078 a 0 ind 11118
__local_9:
; gsym_addr t 10816 a 11152 ind 11152
; gtst finished; t 11078
; load 0
; type 17 reg 0xf0 extra 0x202c4168
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 0 at 11300
jmp.w __local_11
; gsym_addr t 11300 a 0 ind 11340
__local_10:
; gsym_addr t 11078 a 11374 ind 11374
; load 0
; type 16 reg 0x3f0 extra 0x4701000
; ld2 [positionHistory + 1804], tcc__r0
lda.l positionHistory + 1804
sta.b tcc__r0
; load 1
; type 16 reg 0x1f2 extra 0x4701000
; ld2 [sp,3],tcc__r1
; stack adjust: fc + disp - loc - 256 -251
lda 3 + __canRewindDistance_locals + 1,s
sta.b tcc__r1
; gen_opi len 2 op 0x93
; ucmpcd tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
bcs ++
+ dex
++
stx.b tcc__r5
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r5 (0x5) (fr type 0x0 c 1804 r type 0x2961afa0)
; length xxy 2 vtop->type 0x0
; nop
lda.b tcc__r5
and.w #255
sta.b tcc__r5
; load 0
; type 17 reg 0x5 extra 0x202c4168
; mov tcc__r5, tcc__r0
lda.b tcc__r5
sta.b tcc__r0
lda.b tcc__r5h
sta.b tcc__r0h
; gjmp_addr 11300 at 12125
jmp.w __local_12
; gsym_addr t 12125 a 11300 ind 12169
__local_11:
__local_12:
; gsym_addr t 12125 a 12207 ind 12207
; add sp, #__canRewindDistance_locals
.ifgr __canRewindDistance_locals 0
tsa
clc
adc #__canRewindDistance_locals
tas
.endif
rtl
.ENDS

.SECTION ".rewindToFrametext_0x4" SUPERFREE

rewindToFrame:
; sub sp,#__rewindToFrame_locals
.ifgr __rewindToFrame_locals 0
tsa
sec
sbc #__rewindToFrame_locals
tas
.endif
; call r 0x2f0
jsr.l canRewind
; gtst inv 1 t 0 v 0 r 12582 ind 12582
; gsym_addr t 0 a 12621 ind 12621
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 12711 ind 12711
; cmp op 0x95 inv 1 v 243 r 12711
; cmp ne
bne +
; gsym_addr t 0 a 12801 ind 12801
brl __local_13
+
; gtst finished; t 12711
; gtst inv 1 t 0 v 244 r 12877 ind 12877
; VT_jmp r 12877 t 0 ji 0 inv 1 vtop->c.i 12711
; gjmp_addr 0 at 12966
jmp.w __local_14
; gsym_addr t 12966 a 0 ind 13006
__local_13:
; gsym_addr t 12711 a 13040 ind 13040
; gtst finished; t 12966
; load 0
; type 17 reg 0xf0 extra 0x66206575
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 0 at 13188
jmp.w __local_15
; gsym_addr t 13188 a 0 ind 13228
__local_14:
; gsym_addr t 12966 a 13262 ind 13262
; ldpush before load type 0x10 reg 0x1f2
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -247
lda 3 + __rewindToFrame_locals + 1,s
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l getPositionAtFrame
; add sp, #2
pla
; store r 0x0 fr 0x1f2 ft 0x4 fc 0xfffffffc
; st4 tcc__r0, [sp,-4]
; stack adjust: fc + disp - loc - 256 -254
lda.b tcc__r0
sta -4 + __rewindToFrame_locals + 1,s
lda.b tcc__r0h
sta -2 + __rewindToFrame_locals + 1,s
; gtst inv 1 t 0 v 242 r 13819 ind 13819
; load 0
; type 4 reg 0x1f2 extra 0x20686369
; ld4 [sp,-4],tcc__r0
; stack adjust: fc + disp - loc - 256 -254
lda -4 + __rewindToFrame_locals + 1,s
sta.b tcc__r0
lda -2 + __rewindToFrame_locals + 1,s
sta.b tcc__r0h
; gsym_addr t 0 a 14075 ind 14075
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 14165 ind 14165
; cmp op 0x95 inv 1 v 243 r 14165
; cmp ne
bne +
; gsym_addr t 0 a 14255 ind 14255
brl __local_16
+
; gtst finished; t 14165
; gtst inv 1 t 0 v 244 r 14331 ind 14331
; VT_jmp r 14331 t 0 ji 0 inv 1 vtop->c.i 14165
; gjmp_addr 0 at 14420
jmp.w __local_17
; gsym_addr t 14420 a 0 ind 14460
__local_16:
; gsym_addr t 14165 a 14494 ind 14494
; gtst finished; t 14420
; load 0
; type 17 reg 0xf0 extra 0x66206575
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 13188 at 14642
jmp.w __local_18
; gsym_addr t 14642 a 13188 ind 14686
__local_17:
; gsym_addr t 14420 a 14724 ind 14724
; ldpush before load type 0x10 reg 0x1f2
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -245
lda 3 + __rewindToFrame_locals + 1,s
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [positionHistory + 1806], tcc__r0
lda.l positionHistory + 1806
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l calculateFrameDistance
; add sp, #4
tsa
clc
adc #4
tas
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffffa
; st2 tcc__r0, [sp,-6]
; stack adjust: fc + disp - loc - 256 -254
lda.b tcc__r0
sta -6 + __rewindToFrame_locals + 1,s
; ldpush before load type 0x10 reg 0x1f2
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,-6],tcc__r0
; stack adjust: fc + disp - loc - 256 -252
lda -6 + __rewindToFrame_locals + 1,s
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l getRewindEnergyCost
; add sp, #2
pla
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffff8
; st2 tcc__r0, [sp,-8]
; stack adjust: fc + disp - loc - 256 -254
lda.b tcc__r0
sta -8 + __rewindToFrame_locals + 1,s
; load 0
; type 16 reg 0x3f0 extra 0x4701000
; ld2 [playerCharacter + 4], tcc__r0
lda.l playerCharacter + 4
sta.b tcc__r0
; load 1
; type 16 reg 0x1f2 extra 0x4701000
; ld2 [sp,-8],tcc__r1
; stack adjust: fc + disp - loc - 256 -254
lda -8 + __rewindToFrame_locals + 1,s
sta.b tcc__r1
; gen_opi len 2 op 0x92
; ucmpcd tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
bcc ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 16340 ind 16340
; gsym_addr t 0 a 16379 ind 16379
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 16469 ind 16469
; cmp op 0x95 inv 1 v 243 r 16469
; cmp ne
bne +
; gsym_addr t 0 a 16559 ind 16559
brl __local_19
+
; gtst finished; t 16469
; load 0
; type 17 reg 0xf0 extra 0x66206575
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 14642 at 16720
jmp.w __local_20
; gsym_addr t 16720 a 14642 ind 16764
__local_19:
; gsym_addr t 16469 a 16802 ind 16802
; load 0
; type 4 reg 0x1f2 extra 0x20686369
; ld4 [sp,-4],tcc__r0
; stack adjust: fc + disp - loc - 256 -250
lda -4 + __rewindToFrame_locals + 1,s
sta.b tcc__r0
lda -2 + __rewindToFrame_locals + 1,s
sta.b tcc__r0h
; load 1
; type 0 reg 0x100 extra 0x28202974
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; store r 0x1 fr 0x3f0 ft 0x0 fc 0x10
; st2 tcc__r1, [playerCharacter,16]
lda.b tcc__r1
sta.l playerCharacter + 16
; load 0
; type 4 reg 0x1f2 extra 0x20686369
; ld4 [sp,-4],tcc__r0
; stack adjust: fc + disp - loc - 256 -250
lda -4 + __rewindToFrame_locals + 1,s
sta.b tcc__r0
lda -2 + __rewindToFrame_locals + 1,s
sta.b tcc__r0h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x4 c -4 r type 0x0)
; length xxy 4 vtop->type 0x4
inc.b tcc__r0
inc.b tcc__r0
; load 1
; type 0 reg 0x100 extra 0x204d5950
; ld2 [tcc__r0,0],tcc__r1
lda.b [tcc__r0]
sta.b tcc__r1
; store r 0x1 fr 0x3f0 ft 0x0 fc 0x12
; st2 tcc__r1, [playerCharacter,18]
lda.b tcc__r1
sta.l playerCharacter + 18
; load 0
; type 16 reg 0x3f0 extra 0x4701000
; ld2 [playerCharacter + 4], tcc__r0
lda.l playerCharacter + 4
sta.b tcc__r0
; load 1
; type 16 reg 0x1f2 extra 0x4701000
; ld2 [sp,-8],tcc__r1
; stack adjust: fc + disp - loc - 256 -254
lda -8 + __rewindToFrame_locals + 1,s
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x10 c 4 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x4
; st2 tcc__r0, [playerCharacter,4]
lda.b tcc__r0
sta.l playerCharacter + 4
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x710
; st1 tcc__r0, [positionHistory,1808]
sep #$20
lda.b tcc__r0
sta.l positionHistory + 1808
rep #$20
; load 0
; type 17 reg 0xf0 extra 0x66206575
; ld1 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; gjmp_addr 16720 at 18713
jmp.w __local_21
; gsym_addr t 18713 a 16720 ind 18757
__local_15:
__local_18:
__local_20:
__local_21:
; gsym_addr t 18713 a 18795 ind 18795
; add sp, #__rewindToFrame_locals
.ifgr __rewindToFrame_locals 0
tsa
clc
adc #__rewindToFrame_locals
tas
.endif
rtl
.ENDS

.SECTION ".rewindByFramestext_0x5" SUPERFREE

rewindByFrames:
; sub sp,#__rewindByFrames_locals
.ifgr __rewindByFrames_locals 0
tsa
sec
sbc #__rewindByFrames_locals
tas
.endif
; ldpush before load type 0x10 reg 0x1f2
; load 0
; type 16 reg 0x1f2 extra 0x29797469
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -251
lda 3 + __rewindByFrames_locals + 1,s
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l canRewindDistance
; add sp, #2
pla
; gtst inv 1 t 0 v 0 r 19443 ind 19443
; gsym_addr t 0 a 19482 ind 19482
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 19572 ind 19572
; cmp op 0x95 inv 1 v 243 r 19572
; cmp ne
bne +
; gsym_addr t 0 a 19662 ind 19662
brl __local_22
+
; gtst finished; t 19572
; gtst inv 1 t 0 v 244 r 19738 ind 19738
; VT_jmp r 19738 t 0 ji 0 inv 1 vtop->c.i 19572
; gjmp_addr 0 at 19827
jmp.w __local_23
; gsym_addr t 19827 a 0 ind 19867
__local_22:
; gsym_addr t 19572 a 19901 ind 19901
; gtst finished; t 19827
; load 0
; type 17 reg 0xf0 extra 0x3875202c
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 0 at 20049
jmp.w __local_24
; gsym_addr t 20049 a 0 ind 20089
__local_23:
; gsym_addr t 19827 a 20123 ind 20123
; load 0
; type 16 reg 0x3f0 extra 0x4701000
; ld2 [positionHistory + 1806], tcc__r0
lda.l positionHistory + 1806
sta.b tcc__r0
; load 1
; type 16 reg 0x1f2 extra 0x4701000
; ld2 [sp,3],tcc__r1
; stack adjust: fc + disp - loc - 256 -249
lda 3 + __rewindByFrames_locals + 1,s
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x10 c 1806 r type 0x2961afa0)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffffe
; st2 tcc__r0, [sp,-2]
; stack adjust: fc + disp - loc - 256 -254
lda.b tcc__r0
sta -2 + __rewindByFrames_locals + 1,s
; ldpush before load type 0x10 reg 0x1f2
; load 0
; type 16 reg 0x1f2 extra 0x6f632072
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc - 256 -254
lda -2 + __rewindByFrames_locals + 1,s
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l rewindToFrame
; add sp, #2
pla
; gjmp_addr 20049 at 21096
jmp.w __local_25
; gsym_addr t 21096 a 20049 ind 21140
__local_24:
__local_25:
; gsym_addr t 21096 a 21178 ind 21178
; add sp, #__rewindByFrames_locals
.ifgr __rewindByFrames_locals 0
tsa
clc
adc #__rewindByFrames_locals
tas
.endif
rtl
.ENDS

.SECTION ".stopRewindtext_0x6" SUPERFREE

stopRewind:
; sub sp,#__stopRewind_locals
.ifgr __stopRewind_locals 0
tsa
sec
sbc #__stopRewind_locals
tas
.endif
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x710
; st1 tcc__r0, [positionHistory,1808]
sep #$20
lda.b tcc__r0
sta.l positionHistory + 1808
rep #$20
; gsym_addr t 0 a 21716 ind 21716
; add sp, #__stopRewind_locals
.ifgr __stopRewind_locals 0
tsa
clc
adc #__stopRewind_locals
tas
.endif
rtl
.ENDS

.SECTION ".getPositionAtFrametext_0x7" SUPERFREE

getPositionAtFrame:
; sub sp,#__getPositionAtFrame_locals
.ifgr __getPositionAtFrame_locals 0
tsa
sec
sbc #__getPositionAtFrame_locals
tas
.endif
; load 0
; type 16 reg 0x3f0 extra 0x4701000
; ld2 [positionHistory + 1804], tcc__r0
lda.l positionHistory + 1804
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 22298 ind 22298
; gsym_addr t 0 a 22337 ind 22337
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 22427 ind 22427
; cmp op 0x95 inv 1 v 243 r 22427
; cmp ne
bne +
; gsym_addr t 0 a 22517 ind 22517
brl __local_26
+
; gtst finished; t 22427
; load 0
; type 4 reg 0xf0 extra 0x3835365f
; ld4 #0,tcc__r0
lda.w #0
sta.b tcc__r0
lda.w #0
sta.b tcc__r0h
; gjmp_addr 0 at 22701
jmp.w __local_27
; gsym_addr t 22701 a 0 ind 22741
__local_26:
; gsym_addr t 22427 a 22775 ind 22775
; load 0
; type 16 reg 0x3f0 extra 0x46ed000
; ld2 [positionHistory + 1800], tcc__r0
lda.l positionHistory + 1800
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffffe
; st2 tcc__r0, [sp,-2]
; stack adjust: fc + disp - loc - 256 -254
lda.b tcc__r0
sta -2 + __getPositionAtFrame_locals + 1,s
; load 0
; type 16 reg 0xf0 extra 0x46ed000
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffffc
; st2 tcc__r0, [sp,-4]
; stack adjust: fc + disp - loc - 256 -254
lda.b tcc__r0
sta -4 + __getPositionAtFrame_locals + 1,s
__local_34:
; load 0
; type 16 reg 0x1f2 extra 0x4701000
; ld2 [sp,-4],tcc__r0
; stack adjust: fc + disp - loc - 256 -254
lda -4 + __getPositionAtFrame_locals + 1,s
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x4701000
; ld2 [positionHistory + 1804], tcc__r1
lda.l positionHistory + 1804
sta.b tcc__r1
; gen_opi len 2 op 0x92
; ucmpcd tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
bcc ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 23779 ind 23779
; gsym_addr t 0 a 23818 ind 23818
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 23908 ind 23908
; cmp op 0x95 inv 1 v 243 r 23908
; cmp ne
bne +
; gsym_addr t 0 a 23998 ind 23998
brl __local_28
+
; gtst finished; t 23908
; load 0
; type 16 reg 0x1f2 extra 0x4701000
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc - 256 -252
lda -2 + __getPositionAtFrame_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 24351 ind 24351
; gsym_addr t 0 a 24390 ind 24390
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 24480 ind 24480
; cmp op 0x95 inv 1 v 243 r 24480
; cmp ne
bne +
; gsym_addr t 0 a 24570 ind 24570
brl __local_29
+
; gtst finished; t 24480
; gjmp_addr 0 at 24646
jmp.w __local_30
; gsym_addr t 24646 a 0 ind 24686
__local_29:
; gsym_addr t 24480 a 24720 ind 24720
; load 0
; type 16 reg 0x1f2 extra 0x4701000
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc - 256 -252
lda -2 + __getPositionAtFrame_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c -2 r type 0x10)
; length xxy 2 vtop->type 0x10
dec.b tcc__r0
; gjmp_addr 0 at 25061
jmp.w __local_31
; gsym_addr t 25061 a 0 ind 25101
__local_30:
; gsym_addr t 24646 a 25135 ind 25135
; load 0
; type 16 reg 0xf0 extra 0x462af54
; ld2 #299,tcc__r0
lda.w #299
sta.b tcc__r0
__local_31:
; gsym_addr t 25061 a 25261 ind 25261
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffffe
; st2 tcc__r0, [sp,-2]
; stack adjust: fc + disp - loc - 256 -252
lda.b tcc__r0
sta -2 + __getPositionAtFrame_locals + 1,s
; load 0
; type 16 reg 0x1f2 extra 0x2982c330
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc - 256 -252
lda -2 + __getPositionAtFrame_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op *
; mul #6, tcc__r0
lda.w #6
sta.b tcc__r9
lda.b tcc__r0
sta.b tcc__r10
jsr.l tcc__mul
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld1800 #positionHistory + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:positionHistory
sta.b tcc__r1h
lda.w #positionHistory + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x2961afa0)
; length xxy 1800 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 0 r type 0x2961afa0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #4
sta.b tcc__r1
; load 0
; type 16 reg 0x101 extra 0x4701000
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; load 1
; type 16 reg 0x1f2 extra 0x4701000
; ld2 [sp,3],tcc__r1
; stack adjust: fc + disp - loc - 256 -247
lda 3 + __getPositionAtFrame_locals + 1,s
sta.b tcc__r1
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 26699 ind 26699
; gsym_addr t 0 a 26738 ind 26738
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 26828 ind 26828
; cmp op 0x95 inv 1 v 243 r 26828
; cmp ne
bne +
; gsym_addr t 0 a 26918 ind 26918
brl __local_32
+
; gtst finished; t 26828
; load 0
; type 16 reg 0x1f2 extra 0x2982c330
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc - 256 -252
lda -2 + __getPositionAtFrame_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op *
; mul #6, tcc__r0
lda.w #6
sta.b tcc__r9
lda.b tcc__r0
sta.b tcc__r10
jsr.l tcc__mul
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld1800 #positionHistory + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:positionHistory
sta.b tcc__r1h
lda.w #positionHistory + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x2961afa0)
; length xxy 1800 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 4 reg 0x1 extra 0x3835365f
; mov tcc__r1, tcc__r0
lda.b tcc__r1
sta.b tcc__r0
lda.b tcc__r1h
sta.b tcc__r0h
; gjmp_addr 22701 at 27796
jmp.w __local_33
; gsym_addr t 27796 a 22701 ind 27840
__local_32:
; gsym_addr t 26828 a 27878 ind 27878
; load 0
; type 16 reg 0x1f2 extra 0x20646565
; ld2 [sp,-4],tcc__r0
; stack adjust: fc + disp - loc - 256 -254
lda -4 + __getPositionAtFrame_locals + 1,s
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x6b7ed184
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c -4 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffffc
; st2 tcc__r0, [sp,-4]
; stack adjust: fc + disp - loc - 256 -254
lda.b tcc__r0
sta -4 + __getPositionAtFrame_locals + 1,s
; gjmp_addr 23361 at 28512
jmp.w __local_34
; gsym_addr t 28512 a 23361 ind 28556
__local_28:
; gsym_addr t 23908 a 28594 ind 28594
; gsym_addr t 0 a 23361 ind 28632
; load 0
; type 4 reg 0xf0 extra 0x3835365f
; ld4 #0,tcc__r0
lda.w #0
sta.b tcc__r0
lda.w #0
sta.b tcc__r0h
; gjmp_addr 27796 at 28774
jmp.w __local_35
; gsym_addr t 28774 a 27796 ind 28818
__local_27:
__local_33:
__local_35:
; gsym_addr t 28774 a 28856 ind 28856
; add sp, #__getPositionAtFrame_locals
.ifgr __getPositionAtFrame_locals 0
tsa
clc
adc #__getPositionAtFrame_locals
tas
.endif
rtl
.ENDS

.SECTION ".getCurrentRewindFrametext_0x8" SUPERFREE

getCurrentRewindFrame:
; sub sp,#__getCurrentRewindFrame_locals
.ifgr __getCurrentRewindFrame_locals 0
tsa
sec
sbc #__getCurrentRewindFrame_locals
tas
.endif
; load 0
; type 16 reg 0x3f0 extra 0x746e695f
; ld2 [positionHistory + 1806], tcc__r0
lda.l positionHistory + 1806
sta.b tcc__r0
; gjmp_addr 0 at 29372
jmp.w __local_36
; gsym_addr t 29372 a 0 ind 29412
__local_36:
; gsym_addr t 29372 a 29446 ind 29446
; add sp, #__getCurrentRewindFrame_locals
.ifgr __getCurrentRewindFrame_locals 0
tsa
clc
adc #__getCurrentRewindFrame_locals
tas
.endif
rtl
.ENDS

.SECTION ".getOldestFrametext_0x9" SUPERFREE

getOldestFrame:
; sub sp,#__getOldestFrame_locals
.ifgr __getOldestFrame_locals 0
tsa
sec
sbc #__getOldestFrame_locals
tas
.endif
; load 0
; type 16 reg 0x3f0 extra 0x4701000
; ld2 [positionHistory + 1804], tcc__r0
lda.l positionHistory + 1804
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 30045 ind 30045
; gsym_addr t 0 a 30084 ind 30084
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 30174 ind 30174
; cmp op 0x95 inv 1 v 243 r 30174
; cmp ne
bne +
; gsym_addr t 0 a 30264 ind 30264
brl __local_37
+
; gtst finished; t 30174
; load 0
; type 16 reg 0xf0 extra 0x2a203f20
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 0 at 30425
jmp.w __local_38
; gsym_addr t 30425 a 0 ind 30465
__local_37:
; gsym_addr t 30174 a 30499 ind 30499
; load 0
; type 16 reg 0x3f0 extra 0x2982c330
; ld2 [positionHistory + 1802], tcc__r0
lda.l positionHistory + 1802
sta.b tcc__r0
; gen_opi len 2 op *
; mul #6, tcc__r0
lda.w #6
sta.b tcc__r9
lda.b tcc__r0
sta.b tcc__r10
jsr.l tcc__mul
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld1800 #positionHistory + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:positionHistory
sta.b tcc__r1h
lda.w #positionHistory + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x2961afa0)
; length xxy 1800 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 0 r type 0x2961afa0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #4
sta.b tcc__r1
; load 0
; type 16 reg 0x101 extra 0x2a203f20
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; gjmp_addr 30425 at 31444
jmp.w __local_39
; gsym_addr t 31444 a 30425 ind 31488
__local_38:
__local_39:
; gsym_addr t 31444 a 31526 ind 31526
; add sp, #__getOldestFrame_locals
.ifgr __getOldestFrame_locals 0
tsa
clc
adc #__getOldestFrame_locals
tas
.endif
rtl
.ENDS

.SECTION ".getNewestFrametext_0xa" SUPERFREE

getNewestFrame:
; sub sp,#__getNewestFrame_locals
.ifgr __getNewestFrame_locals 0
tsa
sec
sbc #__getNewestFrame_locals
tas
.endif
; load 0
; type 16 reg 0x3f0 extra 0x4701000
; ld2 [positionHistory + 1804], tcc__r0
lda.l positionHistory + 1804
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 32104 ind 32104
; gsym_addr t 0 a 32143 ind 32143
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 32233 ind 32233
; cmp op 0x95 inv 1 v 243 r 32233
; cmp ne
bne +
; gsym_addr t 0 a 32323 ind 32323
brl __local_40
+
; gtst finished; t 32233
; load 0
; type 16 reg 0xf0 extra 0x6e657365
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 0 at 32484
jmp.w __local_41
; gsym_addr t 32484 a 0 ind 32524
__local_40:
; gsym_addr t 32233 a 32558 ind 32558
; load 0
; type 16 reg 0x3f0 extra 0x4701000
; ld2 [positionHistory + 1800], tcc__r0
lda.l positionHistory + 1800
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 32834 ind 32834
; gsym_addr t 0 a 32873 ind 32873
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 32963 ind 32963
; cmp op 0x95 inv 1 v 243 r 32963
; cmp ne
bne +
; gsym_addr t 0 a 33053 ind 33053
brl __local_42
+
; gtst finished; t 32963
; gjmp_addr 0 at 33129
jmp.w __local_43
; gsym_addr t 33129 a 0 ind 33169
__local_42:
; gsym_addr t 32963 a 33203 ind 33203
; load 0
; type 16 reg 0x3f0 extra 0x4701000
; ld2 [positionHistory + 1800], tcc__r0
lda.l positionHistory + 1800
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 1800 r type 0x2961afa0)
; length xxy 2 vtop->type 0x10
dec.b tcc__r0
; gjmp_addr 0 at 33513
jmp.w __local_44
; gsym_addr t 33513 a 0 ind 33553
__local_43:
; gsym_addr t 33129 a 33587 ind 33587
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #299,tcc__r0
lda.w #299
sta.b tcc__r0
__local_44:
; gsym_addr t 33513 a 33707 ind 33707
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffffe
; st2 tcc__r0, [sp,-2]
; stack adjust: fc + disp - loc - 256 -254
lda.b tcc__r0
sta -2 + __getNewestFrame_locals + 1,s
; load 0
; type 16 reg 0x1f2 extra 0x2982c330
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc - 256 -254
lda -2 + __getNewestFrame_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op *
; mul #6, tcc__r0
lda.w #6
sta.b tcc__r9
lda.b tcc__r0
sta.b tcc__r10
jsr.l tcc__mul
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld1800 #positionHistory + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:positionHistory
sta.b tcc__r1h
lda.w #positionHistory + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x2961afa0)
; length xxy 1800 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 0 r type 0x2961afa0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #4
sta.b tcc__r1
; load 0
; type 16 reg 0x101 extra 0x6e657365
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; gjmp_addr 32484 at 34851
jmp.w __local_45
; gsym_addr t 34851 a 32484 ind 34895
__local_41:
__local_45:
; gsym_addr t 34851 a 34933 ind 34933
; add sp, #__getNewestFrame_locals
.ifgr __getNewestFrame_locals 0
tsa
clc
adc #__getNewestFrame_locals
tas
.endif
rtl
.ENDS

.SECTION ".calculateFrameDistancetext_0xb" SUPERFREE

calculateFrameDistance:
; sub sp,#__calculateFrameDistance_locals
.ifgr __calculateFrameDistance_locals 0
tsa
sec
sbc #__calculateFrameDistance_locals
tas
.endif
; load 0
; type 16 reg 0x1f2 extra 0x4701000
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -251
lda 3 + __calculateFrameDistance_locals + 1,s
sta.b tcc__r0
; load 1
; type 16 reg 0x1f2 extra 0x4701000
; ld2 [sp,5],tcc__r1
; stack adjust: fc + disp - loc - 256 -249
lda 5 + __calculateFrameDistance_locals + 1,s
sta.b tcc__r1
; gen_opi len 2 op 0x93
; ucmpcd tcc__r0, tcc__r1
ldx #1
lda.b tcc__r0
sec
sbc.b tcc__r1
tay
bcs ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 35774 ind 35774
; gsym_addr t 0 a 35813 ind 35813
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 35903 ind 35903
; cmp op 0x95 inv 1 v 243 r 35903
; cmp ne
bne +
; gsym_addr t 0 a 35993 ind 35993
brl __local_46
+
; gtst finished; t 35903
; load 0
; type 16 reg 0x1f2 extra 0x4701000
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -251
lda 3 + __calculateFrameDistance_locals + 1,s
sta.b tcc__r0
; load 1
; type 16 reg 0x1f2 extra 0x4701000
; ld2 [sp,5],tcc__r1
; stack adjust: fc + disp - loc - 256 -249
lda 5 + __calculateFrameDistance_locals + 1,s
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x10 c 3 r type 0x2961afa0)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; gjmp_addr 0 at 36577
jmp.w __local_47
; gsym_addr t 36577 a 0 ind 36617
__local_46:
; gsym_addr t 35903 a 36651 ind 36651
; load 0
; type 16 reg 0xf0 extra 0x3b745f72
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 36577 at 36774
jmp.w __local_48
; gsym_addr t 36774 a 36577 ind 36818
__local_47:
__local_48:
; gsym_addr t 36774 a 36856 ind 36856
; add sp, #__calculateFrameDistance_locals
.ifgr __calculateFrameDistance_locals 0
tsa
clc
adc #__calculateFrameDistance_locals
tas
.endif
rtl
.ENDS

.SECTION ".getRewindEnergyCosttext_0xc" SUPERFREE

getRewindEnergyCost:
; sub sp,#__getRewindEnergyCost_locals
.ifgr __getRewindEnergyCost_locals 0
tsa
sec
sbc #__getRewindEnergyCost_locals
tas
.endif
; load 0
; type 16 reg 0x1f2 extra 0x4701000
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -251
lda 3 + __getRewindEnergyCost_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op *
lda.b tcc__r0
asl a
asl a
clc
adc.b tcc__r0
sta.b tcc__r0
; gjmp_addr 0 at 37490
jmp.w __local_49
; gsym_addr t 37490 a 0 ind 37530
__local_49:
; gsym_addr t 37490 a 37564 ind 37564
; add sp, #__getRewindEnergyCost_locals
.ifgr __getRewindEnergyCost_locals 0
tsa
clc
adc #__getRewindEnergyCost_locals
tas
.endif
rtl
.ENDS

.SECTION ".handleTimeManipulationInputtext_0xd" SUPERFREE

handleTimeManipulationInput:
; sub sp,#__handleTimeManipulationInput_locals
.ifgr __handleTimeManipulationInput_locals 0
tsa
sec
sbc #__handleTimeManipulationInput_locals
tas
.endif
; load 0
; type 16 reg 0x1f2 extra 0xa88a00c5
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -251
lda 3 + __handleTimeManipulationInput_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 3 r type 0x2961afa0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #32
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 38330 ind 38330
; gsym_addr t 0 a 38369 ind 38369
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 38459 ind 38459
; cmp op 0x95 inv 1 v 243 r 38459
; cmp ne
bne +
; gsym_addr t 0 a 38549 ind 38549
brl __local_50
+
; gtst finished; t 38459
; load 0
; type 16 reg 0x1f2 extra 0xa88a00c5
; ld2 [sp,5],tcc__r0
; stack adjust: fc + disp - loc - 256 -249
lda 5 + __handleTimeManipulationInput_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 5 r type 0x2961afa0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #32
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 38971 ind 38971
; gsym_addr t 0 a 39010 ind 39010
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 39100 ind 39100
; cmp op 0x95 inv 1 v 243 r 39100
; cmp ne
bne +
; gsym_addr t 0 a 39190 ind 39190
brl __local_51
+
; gtst finished; t 39100
; gtst inv 1 t 38459 v 244 r 39266 ind 39266
; VT_jmp r 39266 t 38459 ji 0 inv 1 vtop->c.i 39100
; gjmp_addr 38459 at 39363
jmp.w __local_52
; gsym_addr t 39363 a 38459 ind 39407
__local_51:
; gsym_addr t 39100 a 39445 ind 39445
; gtst finished; t 39363
; gtst inv 1 t 0 v 245 r 39508 ind 39508
; VT_jmp r 39508 t 0 ji 1 inv 1 vtop->c.i 39363
; gsym_addr t 0 a 39597 ind 39597
; gtst finished; t 39363
; push2 imm r 0xf0
pea.w 1
; call r 0x2f0
jsr.l canRewindDistance
; add sp, #2
pla
; gtst inv 1 t 0 v 0 r 39739 ind 39739
; gsym_addr t 0 a 39778 ind 39778
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 39868 ind 39868
; cmp op 0x95 inv 1 v 243 r 39868
; cmp ne
bne +
; gsym_addr t 0 a 39958 ind 39958
brl __local_53
+
; gtst finished; t 39868
; push2 imm r 0xf0
pea.w 1
; call r 0x2f0
jsr.l rewindByFrames
; add sp, #2
pla
__local_53:
; gsym_addr t 39868 a 40114 ind 40114
__local_50:
__local_52:
; gsym_addr t 39363 a 40152 ind 40152
; load 0
; type 16 reg 0x1f2 extra 0xa88a00c5
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -251
lda 3 + __handleTimeManipulationInput_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 3 r type 0x2961afa0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #16
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 40536 ind 40536
; gsym_addr t 0 a 40575 ind 40575
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 40665 ind 40665
; cmp op 0x95 inv 1 v 243 r 40665
; cmp ne
bne +
; gsym_addr t 0 a 40755 ind 40755
brl __local_54
+
; gtst finished; t 40665
; load 0
; type 16 reg 0x1f2 extra 0xa88a00c5
; ld2 [sp,5],tcc__r0
; stack adjust: fc + disp - loc - 256 -249
lda 5 + __handleTimeManipulationInput_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 5 r type 0x2961afa0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #16
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 41177 ind 41177
; gsym_addr t 0 a 41216 ind 41216
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 41306 ind 41306
; cmp op 0x95 inv 1 v 243 r 41306
; cmp ne
bne +
; gsym_addr t 0 a 41396 ind 41396
brl __local_55
+
; gtst finished; t 41306
; gtst inv 1 t 40665 v 244 r 41472 ind 41472
; VT_jmp r 41472 t 40665 ji 0 inv 1 vtop->c.i 41306
; gjmp_addr 40665 at 41569
jmp.w __local_56
; gsym_addr t 41569 a 40665 ind 41613
__local_55:
; gsym_addr t 41306 a 41651 ind 41651
; gtst finished; t 41569
; gtst inv 1 t 0 v 245 r 41714 ind 41714
; VT_jmp r 41714 t 0 ji 1 inv 1 vtop->c.i 41569
; gsym_addr t 0 a 41803 ind 41803
; gtst finished; t 41569
__local_54:
__local_56:
; gsym_addr t 41569 a 41862 ind 41862
; load 0
; type 16 reg 0x1f2 extra 0xa88a00c5
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -251
lda 3 + __handleTimeManipulationInput_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 3 r type 0x2961afa0)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #32
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 42246 ind 42246
; gsym_addr t 0 a 42285 ind 42285
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 42375 ind 42375
; cmp op 0x95 inv 1 v 243 r 42375
; cmp ne
bne +
; gsym_addr t 0 a 42465 ind 42465
brl __local_57
+
; gtst finished; t 42375
__local_57:
; gsym_addr t 42375 a 42541 ind 42541
; gsym_addr t 0 a 42579 ind 42579
; add sp, #__handleTimeManipulationInput_locals
.ifgr __handleTimeManipulationInput_locals 0
tsa
clc
adc #__handleTimeManipulationInput_locals
tas
.endif
rtl
.ENDS
.RAMSECTION "ram{WLA_FILENAME}.data" APPENDTO "globram.data"

positionHistory dsb 1810

.ENDS

.SECTION "{WLA_FILENAME}.data" APPENDTO "glob.data"

.db
.ENDS

.SECTION ".rodata" SUPERFREE

.ENDS

.RAMSECTION ".bss" BANK $7e SLOT 2
.ENDS
